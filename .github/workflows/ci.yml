name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check --diff src/ tests/
      
    - name: Run isort import check
      run: isort --check-only --diff src/ tests/
      
    - name: Run flake8 linter
      run: flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run mypy type checker
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install -r requirements.txt
    
    - name: Create test directories
      run: |
        mkdir -p data/test
        mkdir -p logs
        mkdir -p config
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run Bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t rag-chatbot:test .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name rag-test -p 8000:8000 rag-chatbot:test
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop rag-test
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      if: github.event_name == 'release'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/rag-chatbot:latest
          ${{ secrets.DOCKER_USERNAME }}/rag-chatbot:${{ github.event.release.tag_name }}

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Run integration tests
      run: |
        # Start services
        docker-compose -f docker-compose.dev.yml up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Run integration tests
        curl -f http://localhost:8000/health
        curl -f http://localhost:8501
        
        # Cleanup
        docker-compose -f docker-compose.dev.yml down

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocstrings
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Deploy documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, docker, integration]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
    
    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1
